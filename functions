import UIKit

func greeting(person: String) -> String {
    let greet = "Hello, \(person)"
    return greet
}

greeting(person: "Irwing")

func minMax(array:[Int]) -> (min: Int, max: Int)? {
    if array.isEmpty { return nil }
    var currentMin = array[0]
    var currentMax = array[0]
    
    for value in array[1..<array.count] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }

    return (min: currentMin, max: currentMax)
}

let bounds = minMax(array: [6, 4, 3, 1, 6, 5, 4, 7, 9])
print("El valor minimo es \(bounds!.min) y el valor maximo es \(bounds!.max)")

if let bounds = minMax(array: [6, 4, 3, 1, 6, 5, 4, 7, 9]) {
    print("El valor minimo es \(bounds.min) y el valor maximo es \(bounds.max)")
}

// Parametro variatico
func geoMean(_ numbers: Double...) -> Double{
    var total: Double = 1
    for number in numbers {
        total *= number
    }
    return pow(total,1 / Double(numbers.count))
}

geoMean(1,2,3)


//Parámetros tipo inout
func swapTwoInts(_ a: inout Int,_ b: inout Int){
    let tempA = a
    a = b
    b = tempA
}

var someInt = 3
var otherInt = 7
print("someInt var \(someInt) y otherInt vale \(otherInt)")
swapTwoInts(&someInt, &otherInt)
print("someInt var \(someInt) y otherInt vale \(otherInt)")


//Funciones como parametro
func chooseStepFunction(backward: Bool) -> (Int) -> Int {
    func stepForward(_ input: Int) -> Int {
        return input + 1
    }
    func stepBackward(_ input: Int) -> Int {
        return input - 1
    }
    return backward ? stepBackward : stepForward
}

var valueNumber = 7
let moveNearerZero = chooseStepFunction(backward: valueNumber > 0)

while valueNumber != 0 {
    print("\(valueNumber)...")
    valueNumber = moveNearerZero(valueNumber)
}
print("Cero!!!!!")


let names: [String] = ["Irwing", "Allison", "Santiago"]

func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2
}
backward("Irwing", "Allison")

var reversedNames = names.sorted(by: backward)

reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in return s1 > s2})

// CLOSURE

///Esto ilustra que la llamada general al método sorted (by :) ha permanecido igual. Un par de paréntesis todavía envuelve todo el argumento del método. Sin embargo, ese argumento es ahora un cierre en línea.

reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 } )
//Rendimientos implícitos de cierres de expresión única
reversedNames = names.sorted(by: { s1, s2 in s1 > s2 } )
//Nombres abreviados de argumentos
///Swift proporciona automáticamente nombres abreviados de argumentos a los cierres en línea, que se pueden usar para hacer referencia a los valores de los argumentos del cierre con los nombres $ 0, $ 1, $ 2, etc.
reversedNames = names.sorted(by: { $0 > $1 } )
//Métodos de operador
reversedNames = names.sorted(by: >)



let digitNames = [0: "Cero", 1: "Uno", 2: "Dos", 3: "Tres", 4: "Cuatro", 5: "Cinco",
                  6: "Seis", 7: "Siete", 8: "Ocho", 9: "Nueve"]

let numbers = [-9, 34 , -23, -2127 ,46, -6]

let numbersStrings = numbers.map{ (number) -> String in
       
    var number = number
    var output = ""
    let minus = "menos"
    let negative = number
    
    number = number < 0 ? number * -1 : number

    repeat{
        output = digitNames[number%10]! + output
        number /= 10
    }while number > 0
    output = negative < 0 ? minus + output : output
    return output
}

print(numbersStrings)


func makeIncrementer(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementer() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementer
}

let incrementByTen = makeIncrementer(forIncrement: 10)
incrementByTen()    // 10
incrementByTen()    // 20
incrementByTen()    // 30

// ESCAPING CLOSURE
var completionHandlers: [() -> Void] = []

func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}
completionHandlers.count

//En este caso no es necesario el modificador ya que el closure se va a ejecutar:
func someFunctionWithNoneEscapingClosure(closure: () -> Void) {
    closure()
}

class SomeClass {
    var x = 10
    func doSomething() {
        someFunctionWithEscapingClosure {
            self.x = 100 // El `self` le indica al closure con el modificador @escaping donde va a estar la variable `x`
        }
        someFunctionWithNoneEscapingClosure {
            x = 200 // En este caso no es necesario el `self` porque el closure se va a ejecutar ahora mismo y sabe donde va a estar la variable `x`
        }
    }
}

let instance = SomeClass()
print(instance.x)        // 10

instance.doSomething()
print(instance.x)        // 200

completionHandlers.count        // 1
completionHandlers.first?()
print(instance.x)        // 100


// ENUMERATIONS

enum MusicalGenre: CaseIterable {
    case Rock, Pop, Metal, Cumbia, Reggaeton, Salsa, Electronica
}

for musicGen in MusicalGenre.allCases{
    switch musicGen {
    case .Rock:
        print("\(musicGen) es el mejor")
    default:
        print(musicGen)
    }
}

enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}

var productBarcode = Barcode.upc(8, 85909, 51226, 3)
productBarcode = .qrCode("ABCDEFGHIJKLMNOP")

//Tambien podriamos simplificar un poco el codigo escribiendo let
//al principio de la declaracion de cada caso
switch productBarcode {
    case let .upc(numberSystem, manufacturer, product, check):
        print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
    case let .qrCode(productCode):
        print("QR code: \(productCode).")
}
