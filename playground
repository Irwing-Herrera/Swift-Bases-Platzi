import UIKit

// ------------------------
// Operaciones de asignación y aritmeticas
// ------------------------

let name = "Irwing Herrera"
var age = 0

// ------------------------
// Comparaciones
// ------------------------

(1, name) < (2, "Allison Herrera")
(1, name) < (1, "Allison Herrera") // Segundo valor, orden alfabetico

// ------------------------
// Operaciones Ternarias
// ------------------------
var currentYear = 2022
age = age + (currentYear > 2021 ? 26 : 25)

// ------------------------
// Operador Nil Coalescing
// ------------------------

let defaultAge = 18
var userAge: Int?

var ageToBeUsed = userAge ?? defaultAge

// ------------------------
// Rangos
// ------------------------

for idx in 1...5 {
    print(idx)
}

for idx in 1..<5 {
    print(idx)
}

let fruits = ["Naranja", "Mango", "Fresa"]
for index in 0..<fruits.count {
    print("La fruta \(index + 1) se llama \(fruits[index])")
}

for fruit in fruits[1...] {
    print(fruit)
}

// ------------------------
// Strings
// ------------------------

let multiLineaString = """
    Hola
    Mundo
    """
let wiseWords = "\"Hola Mundo\""
let dolarSign = "\u{24}"
let blackHeart = "\u{2665}"
let heart = "\u{1F496}"
print(wiseWords)

let nameChars: [Character] = ["I","r","w","i","n","g"]
let nameString: String = String(nameChars)
var first: Character = nameString[nameString.index(before: nameString.endIndex)]

let collection: [String] = [
"Act 1 Scene 1","Act 1 Scene 2","Act 1 Scene 3","Act 1 Scene 4","Act 1 Scene 5",
"Act 2 Scene 1","Act 2 Scene 2","Act 2 Scene 3",
"Act 3 Scene 1","Act 3 Scene 2"
]

var act1SceneCount = 0
for scene in collection {
    if scene.hasPrefix("Act 1") {
        act1SceneCount += 1
    }
}

print("El numero de escenas del acto 1 es \(act1SceneCount)")

// ------------------------
// Array
// ------------------------

var someInt = [Int]()
someInt.append(25)
someInt.count


var someDoubles = Array(repeating: 3.141592, count: 5)
someDoubles.count

for (index, item) in someDoubles.enumerated() {
    print("Item \(index): \(item)")
}

// ------------------------
// Conjunto (Set) -> No permite tener un elemento mas de una vez y no tiene un orden
// ------------------------

var letters = Set<Character>()
letters.insert("A")
letters.insert("B")
letters.insert("C")
letters.insert("D")
letters.insert("E")
letters.count

if let removedGame = letters.remove("A") {
    print("He eliminado de la lista \(removedGame)")
}
letters

let oddDigits: Set = [1,3,5,7,9]
let evenDigits: Set = [0,2,4,6,8]
let primeNumbers: Set = [2,3,5,7]

// A union B = elementos que son o bien de A, o bien de B o de los dos
oddDigits.union(evenDigits).sorted()

// A interseccion B = elmentos que son a la ve de A y de B
oddDigits.intersection(evenDigits)
evenDigits.intersection(primeNumbers).sorted()
oddDigits.intersection(primeNumbers).sorted()

// A - B = elementos que son de A pero no de B
oddDigits.subtracting(primeNumbers).sorted()

// A + B = (A-B) union (B-A)
oddDigits.symmetricDifference(primeNumbers).sorted()

// ------------------------
// Diccionarios [key:value]
// ------------------------

var namesDictionary: [String: Int] = [
    "Irwing": 25,
    "Allison": 24
]

if let oldValue = namesDictionary.updateValue(26, forKey: "Irwing") {
    print("Antes tenia la edad de \(oldValue)")
}

for (key, value) in namesDictionary {
    print("Nombre: \(key), Edad: \(value)")
}

for nameKey in namesDictionary.keys {
    print("Nombre: \(nameKey)")
}

var i: Int = 0
while i < 10 {
    i += 1
}

repeat {
    i += 1
} while i < 14

print(i)

namesDictionary
namesDictionary.count
namesDictionary = [:]

let money = 450
let phrase2 : String
let face : String

switch money {
case 0..<10:
    phrase2 = "dar dinero"
    face = "😀"
case 10..<20:
    phrase2 = "dar dinero haciendo mueca"
    face = "🙃"
case 20..<50:
    phrase2 = "dar dinero con sermon"
    face = "🤬"
case 50..<100:
    phrase2 = "no dar dinero y decir que en otro momento"
    face = "🤪"
default:
    phrase2 = "no dar dinero y decir que nunca jamas"
    face = "😎"
}

print("\(phrase2) \(face)")


let deliveryState: (String, String, Int) = (Estado: "Entregado", Horario: "A tiempo", Distancia: 49 )
let status: String

// Reto
switch deliveryState {
case ("Entregado", "A tiempo", 0..<50):
    status = "El pedido a sido entregado a tiempo y cerca al punto GPS registrado"
case ("Entregado", "Retrasado", 0..<50):
    status = "El pedido a sido entregado con retraso y cerca al punto GPS registrado"
case ("Pendiente",_, _):
    status = "El pedido todavia no a sido entregado"
case ("Entregado", "A tiempo", 50...100):
    status = "El pedido a sido entregado a tiempo, lejano al punto GPS registrado"
case ("Entregado", "Retrasado", 50...100):
    status = "El pedido a sido entregado con retraso, lejano al punto GPS registrado"
default:
    status = "Por favor ponerse en contacto con nuestros operadores"
}

print(status)

let integerToDescribe = 5
var description = "El numero \(integerToDescribe) es"
switch integerToDescribe {
case 2,3,5,7,11,13,17,19:
    description += " un nuemro primo"
    fallthrough
default:
    description += " y un numero entero"
}
print(description)

///El guard se utiliza dentro de una función para realizar un unwrapping de los opcionales. Si encuentra nil dentro, finalizará la función, bucle o cualquier condición usada.

var people: [String: Any] = ["name": "Irwing Herrera", "age": 25, "isMale": true]

//guard let surname = people["surname"] else { return }
// aqui existe surname

if #available(iOS 12, macOS 10.12, *){
    //Ejecutar las acciones a lo iOS12+, a los macOS12+
}else{
    //Mantener el código viejo con versiones anteriores de iOS, macOS...
}
